geom_boxplot(aes(fill = StateAbbreviation))
onlyCovCrop %>%
dplyr::filter(., TotalAmountCredited > 0 & TotalAmountCredited < 6000) %>%
ggplot(., aes(x = StateAbbreviation, y = TotalAmountCredited)) +
geom_boxplot(aes(fill = StateAbbreviation))
onlyCovCrop %>%
ggplot(., aes(x = StateAbbreviation, y = TotalAmountCredited)) +
geom_boxplot(aes(fill = StateAbbreviation))
onlyCovCrop %>%
dplyr::filter(., TotalAmountCredited > 0 & TotalAmountCredited < 6000) %>%
ggplot(., aes(x = StateAbbreviation, y = TotalAmountCredited)) +
geom_boxplot(aes(fill = StateAbbreviation))
onlyCovCrop %>%
dplyr::filter(., TotalAmountCredited > 0 & TotalAmountCredited < 6000) %>%
ggplot(., aes(x = StateAbbreviation, y = TotalAmountCredited)) +
geom_boxplot(aes(fill = StateAbbreviation))
onlyCovCrop %>%
ggplot(., aes(x = StateAbbreviation, y = TotalAmountCredited)) +
geom_boxplot(aes(fill = StateAbbreviation))
onlyCovCrop %>%
dplyr::filter(., TotalAmountCredited > 0 & TotalAmountCredited < 6000) %>%
ggplot(., aes(x = StateAbbreviation, y = TotalAmountCredited)) +
geom_boxplot(aes(fill = StateAbbreviation))
damBuilt <- dams %>% subset(., YEAR != 0)
View(damBuilt)
damBuilt %>%  ggplot(., aes(x = YEAR, y = STATE)) +
geom_point(size = 0.8)
damBuilt %>%  ggplot(., aes(x = YEAR, y = STATE)) +
geom_point(size = 2)
damBuilt
damBuilt %>%  ggplot(., aes(x = YEAR, y = STATE)) +
geom_point(size = 2)+
geom_point(aes(fill = STATE))
damBuilt %>%  ggplot(., aes(x = YEAR, y = STATE)) +
geom_point(size = 2)
damBuilt %>%  ggplot(., aes(x = YEAR, y = STATE)) +
geom_point(size = 2, shape = 10)
damBuilt %>%  ggplot(., aes(x = YEAR, y = STATE)) +
geom_point(size = 2, shape = 10)+
geom_point(aes(fill = STATE))
damBuilt %>%  ggplot(., aes(x = YEAR, y = STATE)) +
geom_point(size = 2, shape = 35)+
geom_point(aes(fill = STATE))
damBuilt %>%  ggplot(., aes(x = YEAR, y = STATE)) +
geom_point(size = 2, shape = 35)
damBuilt %>%  ggplot(., aes(x = YEAR, y = STATE)) +
geom_point(size = 2, shape = 10)
damBuilt %>%  ggplot(., aes(x = YEAR, y = STATE)) +
geom_point(size = 2, shape = 11)
damBuilt %>%  ggplot(., aes(x = YEAR, y = STATE)) +
geom_point(size = 2, shape = 16)
damBuilt %>%  ggplot(., aes(x = YEAR, y = STATE)) +
geom_point(size = 2, shape = 150)
damBuilt %>%  ggplot(., aes(x = YEAR, y = STATE)) +
geom_point(size = 2, shape = 30)
damBuilt %>%  ggplot(., aes(x = YEAR, y = STATE)) +
geom_point(size = 2, shape = 20)
damBuilt %>%  ggplot(., aes(x = YEAR, y = STATE)) +
geom_point(size = 2, shape = 15)
damBuilt %>%  ggplot(., aes(x = YEAR, y = STATE)) +
geom_point(size = 3, shape = 15)
damBuilt %>%  ggplot(., aes(x = YEAR, y = STATE)) +
geom_point(size = 3, shape = 10)
damBuilt %>%  ggplot(., aes(x = YEAR, y = STATE)) +
geom_point(size = 5, shape = 10)
onlyAcres %>%
dplyr::filter(., Cost > 0 & Cost < 5000000) %>% #limiting the graph, omitting most extreme results
#the limitations were made visually, using dplyr::filter
dplyr::filter(., TotalAmountCredited > 0 & TotalAmountCredited < 30000)%>% #limiting the graph, omitting most extreme results
ggplot(., aes(x = Cost, y = TotalAmountCredited)) +
#geom_smooth()+ #!!!regression line, if required
geom_point(size = 0.8)
onlyCovCrop %>%
ggplot(., aes(x = StateAbbreviation, y = TotalAmountCredited)) +
geom_boxplot(aes(fill = StateAbbreviation))
x <- bmps %>% group_by(StateAbbreviation)
x
View(x)
summary(x)
#grouping the table by states and then calculating total cost in one line.
stateCost_bmp_NA <- bmps %>% dplyr::select(StateAbbreviation, Cost) #selecting the data i want
tapply(stateCost_bmp_NA$Cost, stateCost_bmp_NA$StateAbbreviation, summary) #making a stat summary using tapply()
x <- left_join(damBuilt, bmps, by = c("STATE" = "StateAbbreviation"))
x
View(x)
x <- damBuilt %>% group_by(., STATE)
View(x)
x <- damBuilt %>% group_by(., STATE) %>% count(YEAR)
View(x)
x <- damBuilt %>% group_by(., STATE) %>% summarise( NumberOfDams = count(YEAR))
x <- damBuilt %>% group_by(., STATE) %>% summarise(count(YEAR))
View(x)
x <- damBuilt %>% group_by(., STATE) %>% count(YEAR)
View(x)
x <- damBuilt %>% count(YEAR) %>% group_by(., STATE)
x <- damBuilt %>% count(YEAR) %>% group_by(damBuilt, STATE)
View(x)
View(counties)
View(streams)
x <- left_join(dams, streams, by = "COMID")
View(x)
x <- st_join(dams, streams, by = "COMID")
x <- left_join(dams, streams, by = "COMID")
x <- st_join(dams, streams)
View(x)
x
View(x)
##TASK1.5 : ---> Aspatial visualisation of linked datasets - student choice
y <- subset( dams, select = -c(geometry))
View(y)
##TASK1.5 : ---> Aspatial visualisation of linked datasets - student choice
y <- subset( dams, select != geometry)
##TASK1.5 : ---> Aspatial visualisation of linked datasets - student choice
y <- subset( dams, select = -c(geometry))
View(y)
##TASK1.5 : ---> Aspatial visualisation of linked datasets - student choice
y <- dams%>%
as_tibble()%>%dplyr::select(-geometry)
View(y)
x <- dams %>% subset(., YEAR != 0)
View(x)
xjoined <- left_join(y, bmps, by = COMID)
xjoined <- left_join(y, bmps, by = c("STATE" = "StateAbbreviation"))
xjoined
View(xjoined)
View(dams)
View(bmps)
##TASK1.5 : ---> Aspatial visualisation of linked datasets - student choice
tibbleDams <- dams%>%
as_tibble()%>%dplyr::select(-geometry)
View(tibbleDams)
bmpsGrouped <- bmps%>%
group_by(StateAbbreviation) %>% mutate(TOTALCOST = sum(Cost))
View(bmpsGrouped)
bmpsGrouped <- bmps%>%
group_by(StateAbbreviation) %>% summarise(TotalCost - sum(Cost))
bmpsGrouped <- bmps%>%
group_by(StateAbbreviation) %>% summarise(TotalCost = sum(Cost))
View(bmpsGrouped)
bmpsGrouped <- bmps%>%
group_by(StateAbbreviation) %>% summarise(TotalCost = sum(Cost, na.rm = T))
View(bmpsGrouped)
bmpsGrouped <- bmps%>%
group_by(StateAbbreviation) %>% summarise(AvgActiveYrs = mean(DamRemoval - YEAR , na.rm = T))
bmpsGrouped <- bmps%>%
group_by(StateAbbreviation) %>% summarise(TotalCost = sum(Cost, na.rm = T))
View(bmpsGrouped)
damsGrouped <- tibbleDams%>%
group_by(STATE)%>% summarise(AvgActiveYrs = mean(DamRemoval - YEAR))
bmpsGrouped <- bmps%>%
group_by(StateAbbreviation) %>% summarise(TotalCost = sum(Cost, na.rm = T))
damsGrouped <- tibbleDams%>%
group_by(STATE)%>% summarise(AvgActiveYrs = mean(DamRemoval - YEAR))
View(damsGrouped)
damsGrouped <- tibbleDams%>%
group_by(STATE)%>% summarise(AvgActiveYrs = mean(DamRemoval - YEAR))
View(damsGrouped)
damsGrouped <- tibbleDams%>%
group_by(STATE)%>% summarise(AvgActiveYrs = (DamRemoval - YEAR))
View(damsGrouped)
damsGrouped <- tibbleDams%>%
group_by(STATE)%>% summarise(AvgActiveYrs = mean(DamRemoval - YEAR, na.rm = T))
View(damsGrouped)
##TASK1.5 : ---> Aspatial visualisation of linked datasets - student choice
tibbleDams <- damBuilt%>%
as_tibble()%>%dplyr::select(-geometry)
damsGrouped <- tibbleDams%>%
group_by(STATE)%>% summarise(AvgActiveYrs = mean(DamRemoval - YEAR, na.rm = T))
View(damsGrouped)
damsGrouped <- tibbleDams%>%
group_by(STATE)%>% summarise(AvgActiveDamYrs = mean(DamRemoval - YEAR, na.rm = T))
View(damsGrouped)
damsGrouped <- tibbleDams%>%
group_by(STATE)%>% summarise(AvgActiveDamYrs = (DamRemoval - YEAR, na.rm = T))
damsGrouped <- tibbleDams%>%
group_by(STATE)%>% summarise(AvgActiveDamYrs = DamRemoval - YEAR, na.rm = T)
damsGrouped <- tibbleDams%>%
group_by(STATE)%>% summarise(AvgActiveYrs = mean(DamRemoval - YEAR, na.rm = T))
##TASK1.5 : ---> Aspatial visualisation of linked datasets - student choice
tibbleDams <- damBuilt%>%
as_tibble()%>%dplyr::select(-geometry)
damsGrouped <- tibbleDams%>%
group_by(STATE)%>% summarise(AvgActiveYrs = mean(DamRemoval - YEAR, na.rm = T))
bmpsGrouped <- bmps%>%
group_by(StateAbbreviation) %>% summarise(TotalCost = sum(Cost, na.rm = T))
dams2016 <- tibbleDams%>%
subset(., DamRemoval == 2016)%>% summarise(AvgActiveYrs = mean(DamRemoval - YEAR, na.rm = T))
View(dams2016)
dams2016 <- tibbleDams%>%
subset(., DamRemoval == 2016)%>% AvgActiveYrs = mean(DamRemoval - YEAR, na.rm = T)
dams2016 <- tibbleDams%>%
subset(., DamRemoval == 2016)%>% mutate(ActiveYrs = DamRemoval - YEAR, na.rm = T)
dams2016 <- tibbleDams%>%
subset(., DamRemoval == 2016)%>% mutate(ActiveYrs = DamRemoval - YEAR)
View(streams)
##TASK1.5 : ---> Aspatial visualisation of linked datasets - student choice
tibbleDams <- damBuilt%>%
as_tibble()%>%dplyr::select(-geometry)
dams2016 <- tibbleDams%>%
subset(., DamRemoval == 2016)%>% mutate(ActiveYrs = DamRemoval - YEAR)
#Reading in Spatial data (and validating)
counties <- sf::read_sf("./Data/County_Boundaries.shp") %>% sf::st_make_valid()
dams <- sf::read_sf("./Data/Dam_or_Other_Blockage_Removed_2012_2017.shp") %>% sf::st_make_valid()
streams <- sf::read_sf("./Data/Streams_Opened_by_Dam_Removal_2012_2017.shp") %>% sf::st_make_valid()
#Reading in aspatial data
bmps <- read_csv("./Data/BMPreport2016_landbmps.csv")
##Glimpsing/quick viewing data and ensuring validity after making valid
glimpse(bmps) #does not need validation as it has no geometry to validate
glimpse(counties)
counties %>% sf::st_is_valid()
glimpse(dams)
dams %>% sf::st_is_valid()
glimpse(streams)
streams %>% sf::st_is_valid()
##quick summary check of wanted and missing data
summary(bmps$Cost) #NA's show up for cost
summary(bmps$TotalAmountCredited) #shows no missing values
summary(bmps$StateAbbreviation) #no missing values #!!!- returns type, not number summary
summary(dams$YEAR) #some missing data, more 0's than years (median is 0.0)
summary(dams$STATE) #duplicated values that can be grouped.
#grouping the table by states and then calculating total cost in one line.
stateCost_bmp_NA <- bmps %>% dplyr::select(StateAbbreviation, Cost) #selecting the data i want
tapply(stateCost_bmp_NA$Cost, stateCost_bmp_NA$StateAbbreviation, summary) #making a stat summary using tapply()
#----->ANS
tapply(stateCost_bmp_NA$Cost, stateCost_bmp_NA$StateAbbreviation, summary) #making a stat summary using tapply()
stateCost_bmp <- na.omit(stateCost_bmp_NA) #Removes NA values
tapply(stateCost_bmp$Cost, stateCost_bmp$StateAbbreviation, summary) #summary statistics for each state cost using tapply()
onlyAcres <- subset(bmps, Unit == "Acres", na.rm = T) #selecting and assigning on the rows with "Acres" used as units
onlyAcres #showing variable in console to quick check units
#bmps #!!! remove initial hast-tag of this line to compare with original bmps table
onlyAcres <- na.omit(onlyAcres) #removed NA values
summary(onlyAcres$Cost) #quick summary
#----->ANS
onlyAcres %>%
dplyr::filter(., Cost > 0 & Cost < 5000000) %>% #limiting the graph, omitting most extreme results
#the limitations were made visually, using dplyr::filter
dplyr::filter(., TotalAmountCredited > 0 & TotalAmountCredited < 30000)%>% #limiting the graph, omitting most extreme results
ggplot(., aes(x = Cost, y = TotalAmountCredited)) +
#geom_smooth()+ #!!!regression line, if required
geom_point(size = 0.8)
#creating workable variable to preseve original data
onlyCovCrop <- bmps %>% mutate(., BMPbasicNM = stringr::str_sub(BMPShortName, 1, 9))%>%
subset(., BMPbasicNM == "covercrop") #create new variable with only cover crop information
onlyCovCrop %>%
ggplot(., aes(x = StateAbbreviation, y = TotalAmountCredited)) +
geom_boxplot(aes(fill = StateAbbreviation))
onlyCovCrop %>%
ggplot(., aes(x = StateAbbreviation, y = TotalAmountCredited)) +
geom_boxplot(aes(fill = StateAbbreviation))
onlyCovCrop %>%
ggplot(., aes(x = StateAbbreviation, y = TotalAmountCredited)) +
geom_boxplot(aes(fill = StateAbbreviation))
#----->ANS
onlyCovCrop %>%
dplyr::filter(., TotalAmountCredited > 0 & TotalAmountCredited < 6000) %>%
ggplot(., aes(x = StateAbbreviation, y = TotalAmountCredited)) +
geom_boxplot(aes(fill = StateAbbreviation))
#removing year 0 values
damBuilt <- dams %>% subset(., YEAR != 0) #subset the dam data, selecting all that are not 0.
#!!! this also removed all the NA values for the "YEAR" column
damBuilt #shows all observations due to few quantity
#----->ANS
damBuilt %>%  ggplot(., aes(x = YEAR, y = STATE)) +
geom_point(size = 5, shape = 10)
##TASK1.5 : ---> Aspatial visualisation of linked datasets - student choice
tibbleDams <- damBuilt%>%
as_tibble()%>%dplyr::select(-geometry)
dams2016 <- tibbleDams%>%
subset(., DamRemoval == 2016)%>% mutate(ActiveYrs = DamRemoval - YEAR)
View(dams2016)
View(streams)
joined_DamStream <- left_join(dams2016, streams, by = c("COMID" = "ComID"))
View(joined_DamStream)
joined_DamStream <- right_join(dams2016, streams, by = c("COMID" = "ComID"))
joined_DamStream <- inner_join(dams2016, streams, by = c("COMID" = "ComID"))
joined_DamStream <- full_join(dams2016, streams, by = c("COMID" = "ComID"))
joined_DamStream <- full_join(streams, dams2016, by = c("ComID" = "COMID"))
joined_DamStream <- left_join(dams2016, streams, by = c("COMID" = "ComID"))
joined_DamStream
View(joined_DamStream)
summary(joined_DamStream$LengthKM)
"LengthKM" %in% colnames(joined_DamStream)
View(dams)
dams12_17 <- tibbleDams%>%
subset(., DamRemoval = 2012:2016)%>% mutate(ActiveYrs = DamRemoval - YEAR) #Subset to 2016
View(dams12_17)
joined_DamStream <- left_join(dams12_17, streams, by = c("COMID" = "ComID"))
"LengthKM" %in% colnames(joined_DamStream) #check to ensure wanted column is present, couldn't find it in opened table
View(joined_DamStream)
joined_DamStream %>% mutate(DA_Sqkm = DA_SqMi.x * 2.58999)
View(joined_DamStream)
"DA_SqMi.x" %in% colnames(joined_DamStream)
"DA_Sqkm" %in% colnames(joined_DamStream)
View(streams)
joined_DamStream <- joined_DamStream %>% mutate(DA_Sqkm = DA_SqMi.x * 2.58999)
"DA_Sqkm" %in% colnames(joined_DamStream)
View(joined_DamStream)
joined_DamStream %>%
ggplot(., aes(x = DA_Sqkm, y = LengthKM)) +
#geom_smooth()+ #!!!regression line, if required
geom_point(size = 0.8)
joined_DamStream <- joined_DamStream %>% mutate(LengthM = LengthKM * 1000)
"LengthM" %in% colnames(joined_DamStream)
"DA_Sqkm" %in% colnames(joined_DamStream)
"LengthM" %in% colnames(joined_DamStream)
joined_DamStream %>%
ggplot(., aes(x = DA_Sqkm, y = LengthM)) +
#geom_smooth()+ #!!!regression line, if required
geom_point(size = 1)
joined_DamStream %>%
ggplot(., aes(x = DA_Sqkm, y = LengthM)) +
#geom_smooth()+ #!!!regression line, if required
geom_boxplot(aes(fill = STATE.x))
joined_DamStream %>%
ggplot(., aes(x = DA_Sqkm, y = LengthM)) +
#geom_smooth()+ #!!!regression line, if required
geom_bar(aes(fill = STATE.x))
joined_DamStream %>%
ggplot(., aes(x = DA_Sqkm, y = LengthM)) +
#geom_smooth()+ #!!!regression line, if required
geom_curve(aes(fill = STATE.x))
joined_DamStream %>%
ggplot(., aes(x = DA_Sqkm, y = LengthM)) +
#geom_smooth()+ #!!!regression line, if required
geom_curve()
joined_DamStream %>%
ggplot(., aes(x = DA_Sqkm, y = LengthM)) +
#geom_smooth()+ #!!!regression line, if required
geom_point(size = 1)
joined_DamStream %>%
ggplot(., aes(x = DA_Sqkm, y = LengthM)) +
#geom_smooth()+ #!!!regression line, if required
geom_point(size = 3)
joined_DamStream %>%
ggplot(., aes(x = DA_Sqkm, y = LengthM)) +
geom_smooth()+ #!!!regression line, if required
geom_point(size = 3)
joined_DamStream %>%
ggplot(., aes(x = DA_Sqkm, y = LengthM)) +
#geom_smooth()+ #!!!regression line, if required
geom_line()
joined_DamStream %>%
ggplot(., aes(x = DA_Sqkm, y = LengthM)) +
#geom_smooth()+ #!!!regression line, if required
geom_point()
joined_DamStream %>%
ggplot(., aes(x = DA_Sqkm, y = LengthM)) +
#geom_smooth()+ #!!!regression line, if required
geom_line()
joined_DamStream %>%
ggplot(., aes(x = DA_Sqkm, y = LengthM)) +
#geom_smooth()+ #!!!regression line, if required
geom_linerange()
joined_DamStream %>%
ggplot(., aes(x = DA_Sqkm, y = LengthM)) +
#geom_smooth()+ #!!!regression line, if required
geom_point()
joined_DamStream %>%
ggplot(., aes(x = DA_Sqkm, y = LengthM)) +
#geom_smooth()+ #!!!regression line, if required
geom_point(aes(fill = STATE.x))
length <- joined_DamStream$LengthM
hist(length)
graphData <- table(joined_DamStream$DA_Sqkm, joined_DamStream$LengthM)
barplot(graphData, main="Dam Area and Lenghth of Created Streams",
xlab="Dam Name", col=c("darkblue","red"),
legend = rownames(counts), beside=TRUE)
barplot(graphData, main="Dam Area and Lenghth of Created Streams",
xlab="Dam Name", col=c("darkblue","red"),
legend = rownames(graphData), beside=TRUE)
graphData
graphData <- table(joined_DamStream$DA_Sqkm, joined_DamStream$LengthM, joined_DamStream$STATE.x)
graphData
barplot(graphData, main="Dam Area and Lenghth of Created Streams",
xlab="Dam Name", col=c("darkblue","red"),
legend = rownames(graphData), beside=TRUE)
graphData <- table(joined_DamStream$DA_Sqkm, joined_DamStream$LengthM)
graphData
barplot(graphData, main="Dam Area and Lenghth of Created Streams",
xlab="Dam Name", col=c("darkblue","red"),
legend = rownames(graphData), beside=TRUE)
"LengthM" %in% colnames(joined_DamStream)
library(tidyverse)
library(sf)
library(tmap)
library(stringr)
#Reading in Spatial data (and validating)
counties <- sf::read_sf("./Data/County_Boundaries.shp") %>% sf::st_make_valid()
dams <- sf::read_sf("./Data/Dam_or_Other_Blockage_Removed_2012_2017.shp") %>% sf::st_make_valid()
streams <- sf::read_sf("./Data/Streams_Opened_by_Dam_Removal_2012_2017.shp") %>% sf::st_make_valid()
#Reading in aspatial data
bmps <- read_csv("./Data/BMPreport2016_landbmps.csv")
##Glimpsing/quick viewing data and ensuring validity after making valid
glimpse(bmps) #does not need validation as it has no geometry to validate
glimpse(counties)
counties %>% sf::st_is_valid()
glimpse(dams)
dams %>% sf::st_is_valid()
glimpse(streams)
streams %>% sf::st_is_valid()
##quick summary check of wanted and missing data
summary(bmps$Cost) #NA's show up for cost
summary(bmps$TotalAmountCredited) #shows no missing values
summary(bmps$StateAbbreviation) #no missing values #!!!- returns type, not number summary
summary(dams$YEAR) #some missing data, more 0's than years (median is 0.0)
summary(dams$STATE) #duplicated values that can be grouped.
#grouping the table by states and then calculating total cost in one line.
stateCost_bmp_NA <- bmps %>% dplyr::select(StateAbbreviation, Cost) #selecting the data i want
#----->ANS
tapply(stateCost_bmp_NA$Cost, stateCost_bmp_NA$StateAbbreviation, summary) #making a stat summary using tapply()
stateCost_bmp <- na.omit(stateCost_bmp_NA) #Removes NA values
tapply(stateCost_bmp$Cost, stateCost_bmp$StateAbbreviation, summary) #summary statistics for each state cost using tapply()
onlyAcres <- subset(bmps, Unit == "Acres", na.rm = T) #selecting and assigning on the rows with "Acres" used as units
onlyAcres #showing variable in console to quick check units
#bmps #!!! remove initial hast-tag of this line to compare with original bmps table
onlyAcres <- na.omit(onlyAcres) #removed NA values
summary(onlyAcres$Cost) #quick summary
#----->ANS
onlyAcres %>%
dplyr::filter(., Cost > 0 & Cost < 5000000) %>% #limiting the graph, omitting most extreme results
#the limitations were made visually, using dplyr::filter
dplyr::filter(., TotalAmountCredited > 0 & TotalAmountCredited < 30000)%>% #limiting the graph, omitting most extreme results
ggplot(., aes(x = Cost, y = TotalAmountCredited)) +
#geom_smooth()+ #!!!regression line, if required
geom_point(size = 0.8)
#creating workable variable to preseve original data
onlyCovCrop <- bmps %>% mutate(., BMPbasicNM = stringr::str_sub(BMPShortName, 1, 9))%>%
subset(., BMPbasicNM == "covercrop") #create new variable with only cover crop information
onlyCovCrop %>%
ggplot(., aes(x = StateAbbreviation, y = TotalAmountCredited)) +
geom_boxplot(aes(fill = StateAbbreviation))
#----->ANS
onlyCovCrop %>%
dplyr::filter(., TotalAmountCredited > 0 & TotalAmountCredited < 6000) %>%
ggplot(., aes(x = StateAbbreviation, y = TotalAmountCredited)) +
geom_boxplot(aes(fill = StateAbbreviation))
#removing year 0 values
damBuilt <- dams %>% subset(., YEAR != 0) #subset the dam data, selecting all that are not 0.
#!!! this also removed all the NA values for the "YEAR" column
damBuilt #shows all observations due to few quantity
#----->ANS
damBuilt %>%  ggplot(., aes(x = YEAR, y = STATE)) +
geom_point(size = 5, shape = 10)
##TASK1.5 : ---> Aspatial visualisation of linked datasets - student choice
tibbleDams <- damBuilt%>%
as_tibble()%>%dplyr::select(-geometry) #make the table a tibble and remove geometry to reduce errors
dams12_17 <- tibbleDams%>%
subset(., DamRemoval = 2012:2016)%>% mutate(ActiveYrs = DamRemoval - YEAR) #Subset to 2012-2016 while calculating number of years "active"
joined_DamStream <- left_join(dams12_17, streams, by = c("COMID" = "ComID"))
"LengthKM" %in% colnames(joined_DamStream) #check to ensure wanted column is present, couldn't find it in opened table
joined_DamStream <- joined_DamStream %>% mutate(DA_Sqkm = DA_SqMi.x * 2.58999)
joined_DamStream <- joined_DamStream %>% mutate(LengthM = LengthKM * 1000)
"DA_Sqkm" %in% colnames(joined_DamStream)
"LengthM" %in% colnames(joined_DamStream)
View(joined_DamStream)
joined_DamStream %>%  ggplot(., aes(x = DA_Sqkm, y = LengthM)) +
geom_point(size = 5, shape = 10)
joined_DamStream %>%  ggplot(., aes(x = DA_Sqkm, y = LengthM, na.rm = T)) +
geom_point(size = 5, shape = 10)
dams12_17 <- tibbleDams%>%
subset(., DamRemoval = 2012:2016) #Subset to 2012-2016 while calculating number of years "active"
joined_DamStream <- left_join(dams12_17, streams, by = c("COMID" = "ComID"))
"LengthKM" %in% colnames(joined_DamStream) #check to ensure wanted column is present, couldn't find it in opened table
joined_DamStream <- joined_DamStream %>% mutate(DA_Sqkm = DA_SqMi.x * 2.58999)
joined_DamStream <- joined_DamStream %>% mutate(LengthM = LengthKM * 1000)
"DA_Sqkm" %in% colnames(joined_DamStream)
"LengthM" %in% colnames(joined_DamStream)
joined_DamStream %>%  ggplot(., aes(x = DA_Sqkm, y = LengthM)) +
geom_point(size = 5, shape = 10)
View(joined_DamStream)
joined_DamStream %>%  ggplot(., aes(x = DA_Sqkm, y = LengthM)) +
geom_point(size = 5, shape = 10)
library(tidyverse)
library(sf)
library(tmap)
library(stringr)
#Reading in Spatial data (and validating)
counties <- sf::read_sf("./Data/County_Boundaries.shp") %>% sf::st_make_valid()
dams <- sf::read_sf("./Data/Dam_or_Other_Blockage_Removed_2012_2017.shp") %>% sf::st_make_valid()
streams <- sf::read_sf("./Data/Streams_Opened_by_Dam_Removal_2012_2017.shp") %>% sf::st_make_valid()
#Reading in aspatial data
bmps <- read_csv("./Data/BMPreport2016_landbmps.csv")
FIPtemp <- bmps
FIPtemp <- FIPtemp %>% mutate(., FIPSCode = stringr::str_sub(GeographyName, 1, 5)) #shorten FIPS code
FIPtemp <- FIPtemp %>% mutate(., FIP = as.numeric(as.character(FIPtemp$FIPSCode))) #turns values in to numbers then adds them back to the list
summary(FIPtemp$FIP) #verify it is numeric
GEOID10temp <- counties
GEOID10temp <- GEOID10temp %>% mutate(., GEOID10_NUM = as.numeric(as.character(GEOID10temp$GEOID10))) #turns values in to numbers then adds them back to the list
summary(GEOID10temp$GEOID10_NUM)
joinCountBMP <- left_join(GEOID10temp, FIPtemp, by = c("GEOID10_NUM" = "FIP")) #joining the datasets
View(joinCountBMP)
#removing year 0 values
damBuilt <- dams %>% subset(., YEAR != 0) #subset the dam data, selecting all that are not 0.
#!!! this also removed all the NA values for the "YEAR" column
damBuilt #shows all observations due to few quantity
#----->ANS
damBuilt %>%  ggplot(., aes(x = YEAR, y = STATE)) +
geom_point(size = 5, shape = 10)
##TASK1.5 : ---> Aspatial visualisation of linked datasets - student choice
tibbleDams <- damBuilt%>%
as_tibble()%>%dplyr::select(-geometry) #make the table a tibble and remove geometry to reduce errors
dams12_17 <- tibbleDams%>%
subset(., DamRemoval = 2012:2016)%>% mutate(ActiveYrs = DamRemoval - YEAR) #Subset to 2012-2016 while calculating number of years "active"
rmvdDams <- dams%>%
subset(., DamRemoval = 2012:2016)
View(rmvdDams)
joinRmvdDamsStrm <- left_join(rmvdDams, streams, by = c("COMID" = "ComID"))
joinRmvdDamsStrm <- st_join(rmvdDams, streams, by = c("COMID" = "ComID"))
joinRmvdDamsStrm <- ful_join(rmvdDams, streams, by = c("COMID" = "ComID"))
joinRmvdDamsStrm <- full_join(rmvdDams, streams, by = c("COMID" = "ComID"))
rmvdDams <- dams%>% subset(., DamRemoval = 2012:2016)
View(streams)
