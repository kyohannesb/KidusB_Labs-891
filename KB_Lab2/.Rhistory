joined_DamStream %>%
ggplot(., aes(x = DA_Sqkm, y = LengthM)) +
#geom_smooth()+ #!!!regression line, if required
geom_line()
joined_DamStream %>%
ggplot(., aes(x = DA_Sqkm, y = LengthM)) +
#geom_smooth()+ #!!!regression line, if required
geom_linerange()
joined_DamStream %>%
ggplot(., aes(x = DA_Sqkm, y = LengthM)) +
#geom_smooth()+ #!!!regression line, if required
geom_point()
joined_DamStream %>%
ggplot(., aes(x = DA_Sqkm, y = LengthM)) +
#geom_smooth()+ #!!!regression line, if required
geom_point(aes(fill = STATE.x))
length <- joined_DamStream$LengthM
hist(length)
graphData <- table(joined_DamStream$DA_Sqkm, joined_DamStream$LengthM)
barplot(graphData, main="Dam Area and Lenghth of Created Streams",
xlab="Dam Name", col=c("darkblue","red"),
legend = rownames(counts), beside=TRUE)
barplot(graphData, main="Dam Area and Lenghth of Created Streams",
xlab="Dam Name", col=c("darkblue","red"),
legend = rownames(graphData), beside=TRUE)
graphData
graphData <- table(joined_DamStream$DA_Sqkm, joined_DamStream$LengthM, joined_DamStream$STATE.x)
graphData
barplot(graphData, main="Dam Area and Lenghth of Created Streams",
xlab="Dam Name", col=c("darkblue","red"),
legend = rownames(graphData), beside=TRUE)
graphData <- table(joined_DamStream$DA_Sqkm, joined_DamStream$LengthM)
graphData
barplot(graphData, main="Dam Area and Lenghth of Created Streams",
xlab="Dam Name", col=c("darkblue","red"),
legend = rownames(graphData), beside=TRUE)
"LengthM" %in% colnames(joined_DamStream)
library(tidyverse)
library(sf)
library(tmap)
library(stringr)
#Reading in Spatial data (and validating)
counties <- sf::read_sf("./Data/County_Boundaries.shp") %>% sf::st_make_valid()
dams <- sf::read_sf("./Data/Dam_or_Other_Blockage_Removed_2012_2017.shp") %>% sf::st_make_valid()
streams <- sf::read_sf("./Data/Streams_Opened_by_Dam_Removal_2012_2017.shp") %>% sf::st_make_valid()
#Reading in aspatial data
bmps <- read_csv("./Data/BMPreport2016_landbmps.csv")
##Glimpsing/quick viewing data and ensuring validity after making valid
glimpse(bmps) #does not need validation as it has no geometry to validate
glimpse(counties)
counties %>% sf::st_is_valid()
glimpse(dams)
dams %>% sf::st_is_valid()
glimpse(streams)
streams %>% sf::st_is_valid()
##quick summary check of wanted and missing data
summary(bmps$Cost) #NA's show up for cost
summary(bmps$TotalAmountCredited) #shows no missing values
summary(bmps$StateAbbreviation) #no missing values #!!!- returns type, not number summary
summary(dams$YEAR) #some missing data, more 0's than years (median is 0.0)
summary(dams$STATE) #duplicated values that can be grouped.
#grouping the table by states and then calculating total cost in one line.
stateCost_bmp_NA <- bmps %>% dplyr::select(StateAbbreviation, Cost) #selecting the data i want
#----->ANS
tapply(stateCost_bmp_NA$Cost, stateCost_bmp_NA$StateAbbreviation, summary) #making a stat summary using tapply()
stateCost_bmp <- na.omit(stateCost_bmp_NA) #Removes NA values
tapply(stateCost_bmp$Cost, stateCost_bmp$StateAbbreviation, summary) #summary statistics for each state cost using tapply()
onlyAcres <- subset(bmps, Unit == "Acres", na.rm = T) #selecting and assigning on the rows with "Acres" used as units
onlyAcres #showing variable in console to quick check units
#bmps #!!! remove initial hast-tag of this line to compare with original bmps table
onlyAcres <- na.omit(onlyAcres) #removed NA values
summary(onlyAcres$Cost) #quick summary
#----->ANS
onlyAcres %>%
dplyr::filter(., Cost > 0 & Cost < 5000000) %>% #limiting the graph, omitting most extreme results
#the limitations were made visually, using dplyr::filter
dplyr::filter(., TotalAmountCredited > 0 & TotalAmountCredited < 30000)%>% #limiting the graph, omitting most extreme results
ggplot(., aes(x = Cost, y = TotalAmountCredited)) +
#geom_smooth()+ #!!!regression line, if required
geom_point(size = 0.8)
#creating workable variable to preseve original data
onlyCovCrop <- bmps %>% mutate(., BMPbasicNM = stringr::str_sub(BMPShortName, 1, 9))%>%
subset(., BMPbasicNM == "covercrop") #create new variable with only cover crop information
onlyCovCrop %>%
ggplot(., aes(x = StateAbbreviation, y = TotalAmountCredited)) +
geom_boxplot(aes(fill = StateAbbreviation))
#----->ANS
onlyCovCrop %>%
dplyr::filter(., TotalAmountCredited > 0 & TotalAmountCredited < 6000) %>%
ggplot(., aes(x = StateAbbreviation, y = TotalAmountCredited)) +
geom_boxplot(aes(fill = StateAbbreviation))
#removing year 0 values
damBuilt <- dams %>% subset(., YEAR != 0) #subset the dam data, selecting all that are not 0.
#!!! this also removed all the NA values for the "YEAR" column
damBuilt #shows all observations due to few quantity
#----->ANS
damBuilt %>%  ggplot(., aes(x = YEAR, y = STATE)) +
geom_point(size = 5, shape = 10)
##TASK1.5 : ---> Aspatial visualisation of linked datasets - student choice
tibbleDams <- damBuilt%>%
as_tibble()%>%dplyr::select(-geometry) #make the table a tibble and remove geometry to reduce errors
dams12_17 <- tibbleDams%>%
subset(., DamRemoval = 2012:2016)%>% mutate(ActiveYrs = DamRemoval - YEAR) #Subset to 2012-2016 while calculating number of years "active"
joined_DamStream <- left_join(dams12_17, streams, by = c("COMID" = "ComID"))
"LengthKM" %in% colnames(joined_DamStream) #check to ensure wanted column is present, couldn't find it in opened table
joined_DamStream <- joined_DamStream %>% mutate(DA_Sqkm = DA_SqMi.x * 2.58999)
joined_DamStream <- joined_DamStream %>% mutate(LengthM = LengthKM * 1000)
"DA_Sqkm" %in% colnames(joined_DamStream)
"LengthM" %in% colnames(joined_DamStream)
View(joined_DamStream)
joined_DamStream %>%  ggplot(., aes(x = DA_Sqkm, y = LengthM)) +
geom_point(size = 5, shape = 10)
joined_DamStream %>%  ggplot(., aes(x = DA_Sqkm, y = LengthM, na.rm = T)) +
geom_point(size = 5, shape = 10)
dams12_17 <- tibbleDams%>%
subset(., DamRemoval = 2012:2016) #Subset to 2012-2016 while calculating number of years "active"
joined_DamStream <- left_join(dams12_17, streams, by = c("COMID" = "ComID"))
"LengthKM" %in% colnames(joined_DamStream) #check to ensure wanted column is present, couldn't find it in opened table
joined_DamStream <- joined_DamStream %>% mutate(DA_Sqkm = DA_SqMi.x * 2.58999)
joined_DamStream <- joined_DamStream %>% mutate(LengthM = LengthKM * 1000)
"DA_Sqkm" %in% colnames(joined_DamStream)
"LengthM" %in% colnames(joined_DamStream)
joined_DamStream %>%  ggplot(., aes(x = DA_Sqkm, y = LengthM)) +
geom_point(size = 5, shape = 10)
View(joined_DamStream)
joined_DamStream %>%  ggplot(., aes(x = DA_Sqkm, y = LengthM)) +
geom_point(size = 5, shape = 10)
library(tidyverse)
library(sf)
library(tmap)
library(stringr)
#Reading in Spatial data (and validating)
counties <- sf::read_sf("./Data/County_Boundaries.shp") %>% sf::st_make_valid()
dams <- sf::read_sf("./Data/Dam_or_Other_Blockage_Removed_2012_2017.shp") %>% sf::st_make_valid()
streams <- sf::read_sf("./Data/Streams_Opened_by_Dam_Removal_2012_2017.shp") %>% sf::st_make_valid()
#Reading in aspatial data
bmps <- read_csv("./Data/BMPreport2016_landbmps.csv")
FIPtemp <- bmps
FIPtemp <- FIPtemp %>% mutate(., FIPSCode = stringr::str_sub(GeographyName, 1, 5)) #shorten FIPS code
FIPtemp <- FIPtemp %>% mutate(., FIP = as.numeric(as.character(FIPtemp$FIPSCode))) #turns values in to numbers then adds them back to the list
summary(FIPtemp$FIP) #verify it is numeric
GEOID10temp <- counties
GEOID10temp <- GEOID10temp %>% mutate(., GEOID10_NUM = as.numeric(as.character(GEOID10temp$GEOID10))) #turns values in to numbers then adds them back to the list
summary(GEOID10temp$GEOID10_NUM)
joinCountBMP <- left_join(GEOID10temp, FIPtemp, by = c("GEOID10_NUM" = "FIP")) #joining the datasets
View(joinCountBMP)
#removing year 0 values
damBuilt <- dams %>% subset(., YEAR != 0) #subset the dam data, selecting all that are not 0.
#!!! this also removed all the NA values for the "YEAR" column
damBuilt #shows all observations due to few quantity
#----->ANS
damBuilt %>%  ggplot(., aes(x = YEAR, y = STATE)) +
geom_point(size = 5, shape = 10)
##TASK1.5 : ---> Aspatial visualisation of linked datasets - student choice
tibbleDams <- damBuilt%>%
as_tibble()%>%dplyr::select(-geometry) #make the table a tibble and remove geometry to reduce errors
dams12_17 <- tibbleDams%>%
subset(., DamRemoval = 2012:2016)%>% mutate(ActiveYrs = DamRemoval - YEAR) #Subset to 2012-2016 while calculating number of years "active"
rmvdDams <- dams%>%
subset(., DamRemoval = 2012:2016)
View(rmvdDams)
joinRmvdDamsStrm <- left_join(rmvdDams, streams, by = c("COMID" = "ComID"))
joinRmvdDamsStrm <- st_join(rmvdDams, streams, by = c("COMID" = "ComID"))
joinRmvdDamsStrm <- ful_join(rmvdDams, streams, by = c("COMID" = "ComID"))
joinRmvdDamsStrm <- full_join(rmvdDams, streams, by = c("COMID" = "ComID"))
rmvdDams <- dams%>% subset(., DamRemoval = 2012:2016)
View(streams)
library(tidyverse)
library(sf)
library(tmap)
library(stringr)
#Reading in Spatial data (and validating)
counties <- sf::read_sf("./Data/County_Boundaries.shp") %>% sf::st_make_valid()
dams <- sf::read_sf("./Data/Dam_or_Other_Blockage_Removed_2012_2017.shp") %>% sf::st_make_valid()
streams <- sf::read_sf("./Data/Streams_Opened_by_Dam_Removal_2012_2017.shp") %>% sf::st_make_valid()
#Reading in aspatial data
bmps <- read_csv("./Data/BMPreport2016_landbmps.csv")
##Glimpsing/quick viewing data and ensuring validity after making valid
glimpse(bmps) #does not need validation as it has no geometry to validate
glimpse(counties)
counties %>% sf::st_is_valid()
glimpse(dams)
dams %>% sf::st_is_valid()
glimpse(streams)
streams %>% sf::st_is_valid()
##quick summary check of wanted and missing data
summary(bmps$Cost) #NA's show up for cost
summary(bmps$TotalAmountCredited) #shows no missing values
summary(bmps$StateAbbreviation) #no missing values #!!!- returns type, not number summary
summary(dams$YEAR) #some missing data, more 0's than years (median is 0.0)
summary(dams$STATE) #duplicated values that can be grouped.
summary(streams$LengthKM)
tm_shape(streams) + tm_lines()
#grouping the table by states and then calculating total cost in one line.
stateCost_bmp_NA <- bmps %>% dplyr::select(StateAbbreviation, Cost) #selecting the data i want
#----->ANS
tapply(stateCost_bmp_NA$Cost, stateCost_bmp_NA$StateAbbreviation, summary) #making a stat summary using tapply()
stateCost_bmp <- na.omit(stateCost_bmp_NA) #Removes NA values
tapply(stateCost_bmp$Cost, stateCost_bmp$StateAbbreviation, summary) #summary statistics for each state cost using tapply()
onlyAcres <- subset(bmps, Unit == "Acres", na.rm = T) #selecting and assigning on the rows with "Acres" used as units
onlyAcres #showing variable in console to quick check units
#bmps #!!! remove initial hast-tag of this line to compare with original bmps table
onlyAcres <- na.omit(onlyAcres) #removed NA values
summary(onlyAcres$Cost) #quick summary
#----->ANS
onlyAcres %>%
dplyr::filter(., Cost > 0 & Cost < 5000000) %>% #limiting the graph, omitting most extreme results
#the limitations were made visually, using dplyr::filter
dplyr::filter(., TotalAmountCredited > 0 & TotalAmountCredited < 30000)%>% #limiting the graph, omitting most extreme results
ggplot(., aes(x = Cost, y = TotalAmountCredited)) +
#geom_smooth()+ #!!!regression line, if required
geom_point(size = 0.8)
#creating workable variable to preseve original data
onlyCovCrop <- bmps %>% mutate(., BMPbasicNM = stringr::str_sub(BMPShortName, 1, 9))%>%
subset(., BMPbasicNM == "covercrop") #create new variable with only cover crop information
onlyCovCrop %>%
ggplot(., aes(x = StateAbbreviation, y = TotalAmountCredited)) +
geom_boxplot(aes(fill = StateAbbreviation))
#----->ANS
onlyCovCrop %>%
dplyr::filter(., TotalAmountCredited > 0 & TotalAmountCredited < 6000) %>%
ggplot(., aes(x = StateAbbreviation, y = TotalAmountCredited)) +
geom_boxplot(aes(fill = StateAbbreviation))
#removing year 0 values
damBuilt <- dams %>% subset(., YEAR != 0) #subset the dam data, selecting all that are not 0.
#!!! this also removed all the NA values for the "YEAR" column
damBuilt #shows all observations due to few quantity
#----->ANS
damBuilt %>%  ggplot(., aes(x = YEAR, y = STATE)) +
geom_point(size = 5, shape = 10)
##TASK1.5 : ---> Aspatial visualisation of linked datasets - student choice
tibbleDams <- damBuilt%>%
as_tibble()%>%dplyr::select(-geometry) #make the table a tibble and remove geometry to reduce errors
dams12_17 <- tibbleDams%>%
subset(., DamRemoval = 2012:2016)%>% mutate(ActiveYrs = DamRemoval - YEAR) #Subset to 2012-2016 while calculating number of years "active"
joined_DamStream <- left_join(dams12_17, streams, by = c("COMID" = "ComID"))
"LengthKM" %in% colnames(joined_DamStream) #check to ensure wanted column is present, couldn't find it in opened table
View(onlyCovCrop)
joined_DamStream <- joined_DamStream %>% mutate(DA_Sqkm = DA_SqMi.x * 2.58999) #calculating the square KM of the dams
joined_DamStream <- joined_DamStream %>% mutate(LengthM = LengthKM * 1000) #calculating the length in meters
"DA_Sqkm" %in% colnames(joined_DamStream) #checking to see if columns have been added
"LengthM" %in% colnames(joined_DamStream)
#----->ANS
joined_DamStream %>%  ggplot(., aes(x = DA_Sqkm, y = LengthM, size = ActiveYrs)) + #tried colour but could not figure out how to seperate by individual point
geom_point(alpha = 1, shape = 19) +
theme_gray(base_size = 15)+
labs(x = "Dam Area (Km2)", y = "Length of Resulting Stream (m)", subtitle = "Area vs created stream length of Removed dams")
top5StrmTst <- streams %>% arrange(desc(LengthKM)) %>% #arrange the coloumn of length to largest on top
dplyr::select(ComID, FCode, GNIS_Name, LengthKM) %>% #bring up only the columns that are wanted
head(., 5) #output shows the top 5 lengths of streams and their associated names and ID codes
top5StrmTst #shows created table
top5StrmTst %>% sf::st_length(.,) #will show lengths in meters computed spatially using geometry
#----->ANS
top5Strm <- streams %>% arrange(desc(sf::st_length(.,))) %>% #spatially find legnths and arrange by descending
dplyr::select(ComID, FCode, GNIS_Name, LengthKM) %>% #bring up only the columns that are wanted
head(., 5) #only top 5 brought up
top5Strm #!!!this will show TRUE top 5
top5Strm %>% sf::st_length(.,)
#----->ANS
onlyAcres %>%
dplyr::filter(., Cost > 0 & Cost < 5000000) %>% #limiting the graph, omitting most extreme results
#the limitations were made visually, using dplyr::filter
dplyr::filter(., TotalAmountCredited > 0 & TotalAmountCredited < 30000)%>% #limiting the graph, omitting most extreme results
ggplot(., aes(x = Cost, y = TotalAmountCredited)) +
#geom_smooth()+ #!!!regression line, if required
geom_point(size = 0.8)
#creating workable variable to preseve original data
onlyCovCrop <- bmps %>% mutate(., BMPbasicNM = stringr::str_sub(BMPShortName, 1, 9))%>%
subset(., BMPbasicNM == "covercrop") #create new variable with only cover crop information
onlyCovCrop %>%
ggplot(., aes(x = StateAbbreviation, y = TotalAmountCredited)) +
geom_boxplot(aes(fill = StateAbbreviation))
#----->ANS
onlyCovCrop %>%
dplyr::filter(., TotalAmountCredited > 0 & TotalAmountCredited < 6000) %>%
ggplot(., aes(x = StateAbbreviation, y = TotalAmountCredited)) +
geom_boxplot(aes(fill = StateAbbreviation))
#removing year 0 values
damBuilt <- dams %>% subset(., YEAR != 0) #subset the dam data, selecting all that are not 0.
#!!! this also removed all the NA values for the "YEAR" column
damBuilt #shows all observations due to few quantity
#----->ANS
damBuilt %>%  ggplot(., aes(x = YEAR, y = STATE)) +
geom_point(size = 5, shape = 10)
##TASK1.5 : ---> Aspatial visualisation of linked datasets - student choice
tibbleDams <- damBuilt%>%
as_tibble()%>%dplyr::select(-geometry) #make the table a tibble and remove geometry to reduce errors
dams12_17 <- tibbleDams%>%
subset(., DamRemoval = 2012:2016)%>% mutate(ActiveYrs = DamRemoval - YEAR) #Subset to 2012-2016 while calculating number of years "active"
joined_DamStream <- left_join(dams12_17, streams, by = c("COMID" = "ComID"))
"LengthKM" %in% colnames(joined_DamStream) #check to ensure wanted column is present, couldn't find it in opened table
joined_DamStream <- joined_DamStream %>% mutate(DA_Sqkm = DA_SqMi.x * 2.58999) #calculating the square KM of the dams
joined_DamStream <- joined_DamStream %>% mutate(LengthM = LengthKM * 1000) #calculating the length in meters
"DA_Sqkm" %in% colnames(joined_DamStream) #checking to see if columns have been added
"LengthM" %in% colnames(joined_DamStream)
#----->ANS
joined_DamStream %>%  ggplot(., aes(x = DA_Sqkm, y = LengthM, size = ActiveYrs)) + #tried colour but could not figure out how to separate by individual point
geom_point(alpha = 1, shape = 19) +
theme_gray(base_size = 15)+
labs(x = "Dam Area (Km2)", y = "Length of Resulting Stream (m)", subtitle = "Area vs created stream length of Removed dams")
top5StrmTst <- streams %>% arrange(desc(LengthKM)) %>% #arrange the column of length to largest on top
dplyr::select(ComID, FCode, GNIS_Name, LengthKM) %>% #bring up only the columns that are wanted
head(., 5) #output shows the top 5 lengths of streams and their associated names and ID codes
top5StrmTst #shows created table
top5StrmTst %>% sf::st_length(.,) #will show lengths in meters computed spatially using geometry
#----->ANS
top5Strm <- streams %>% arrange(desc(sf::st_length(.,))) %>% #spatially find lengths and arrange by descending
dplyr::select(ComID, FCode, GNIS_Name, LengthKM) %>% #bring up only the columns that are wanted
head(., 5) #only top 5 brought up
top5Strm #!!!this will show TRUE top 5
top5Strm %>% sf::st_length(.,)
#creating variable to hold grouped and calculated values.
TotStrmCounty <- streams %>% mutate(., GEOlength = sf::st_length(.,)) %>% #creates a column for the spatial length
group_by(FCode) %>%  #grouping by "FCode" under assumption this is FIPS code (could not locate names)
summarise(TOTlnthStrm = sum(GEOlength)) %>% #creating total lengths using groups made
arrange(desc(TOTlnthStrm)) #sorting based on total stream length
#----->ANS
TotStrmCounty %>% dplyr::select(FCode, TOTlnthStrm)%>% #selecting what to show
head(., 3) #showing only top three
#----->ANS
TotStrmCounty %>% dplyr::select(FCode, TOTlnthStrm)%>% #selecting what to show
head(., 3) #showing only top three
FIPtemp <- bmps
FIPtemp <- FIPtemp %>% mutate(., FIPSCode = stringr::str_sub(GeographyName, 1, 5)) #shorten FIPS code
FIPtemp <- FIPtemp %>% mutate(., FIP = as.numeric(as.character(FIPtemp$FIPSCode))) #turns values in to numbers then adds them back to the list
summary(FIPtemp$FIP) #verify it is numeric and give quick summary (should not have 0s)
groupBmpTemp <- FIPtemp%>% group_by(StateAbbreviation) %>% summarise(totalCost = sum(Cost, na.rm=T))
View(groupBmpTemp)
GEOID10temp <- counties
GEOID10temp <- GEOID10temp %>% mutate(., GEOID10_NUM = as.numeric(as.character(GEOID10temp$GEOID10))) #turns values in to numbers then adds them back to the list
summary(GEOID10temp$GEOID10_NUM) #verify it is numeric and give quick summary (should not have 0s)
View(GEOID10temp)
groupBmpTemp <- FIPtemp%>% group_by(StateAbbreviation) %>%
mutate(FIP = FIPtemp$FIP) %>%
summarise(totalCost = sum(Cost, na.rm=T))
groupBmpTemp <- FIPtemp%>% group_by(FIP) %>%
mutate(STATEname = FIPtemp$StateAbbreviation) %>%
summarise(totalCost = sum(Cost, na.rm=T))
groupBmpTemp <- FIPtemp%>% group_by(StateAbbreviation, FIP) %>% mutate(summarise(totalCost = sum(Cost, na.rm=T)))
groupBmpTemp <- FIPtemp%>% group_by(StateAbbreviation, FIP) %>% summarise(totalCost = sum(Cost, na.rm=T))
GEOID10temp <- counties
GEOID10temp <- GEOID10temp %>% mutate(., GEOID10_NUM = as.numeric(as.character(GEOID10temp$GEOID10))) #turns values in to numbers then adds them back to the list
summary(GEOID10temp$GEOID10_NUM) #verify it is numeric and give quick summary (should not have 0s)
joinCountBMP <- left_join(GEOID10temp, groupBmpTemp, by = c("GEOID10_NUM" = "FIP")) #joining the datasets
View(joinCountBMP)
tm_shape(joinCountBMP) + tm_polygons(col = "totalCost")
View(dams)
crs(dams)
st::sf_crs(dams)
sf::sf_crs(dams)
sf::sp_crs(dams)
sf::st_crs(dams)
sf::st_crs(counties)
sf::st_crs(streams)
sf::st_crs(dams)
streams %>% st_is_within_distance(., dams, 1)
streams %>% st_is_within_distance(., dams, )
streams %>% st_is_within_distance(., dams, 20)
streams %>% st_is_within_distance(., dams, 500)
streams %>% st_is_within_distance(., dams, 25000)
x<-streams %>% st_is_within_distance(., dams, 25000)
View(x)
x<-dams %>% st_is_within_distance(., streams, 1)
View(x)
?st_join
damStrmClos <- dams %>% st_nearest_feature(., streams)
damStrmClos <- dams %>% st_nearest_feature(., streams)
summary(streams$LengthKM)
damStrmClos
?cbind
damStrmClos <- dams %>% st_join(., streams)
View(damStrmClos)
damStrmClos %>% dplyr::select(DAM_NAME, GNIS_Name)
damStrmClos %>% dplyr::select(DAM_NAME.x, GNIS_Name)
View(streams)
damStrmClos <- streams %>% st_join(., dams)
damStrmClos <- dams %>% st_join(., streams)
damStrmClos %>% dplyr::select(DAM_NAME.x, GNIS_Name)
damStrmClos %>% dplyr::select(DAM_NAME.x, WATERBODY.x, GNIS_Name)
x <- dams %>% group_by(., STATE) %>% summarise(count(DamRemoval))
x <- dams %>% group_by(., STATE) %>% summarise(count())
x <- dams %>% mutate(., Count = 1)  %>%
group_by(., STATE) %>% summarise(NumberDams = sum(Count))
View(x)
#----->ANS
stateDams
stateDams <- dams %>% mutate(., Count = 1)  %>%
group_by(., STATE) %>% summarise(NumberDams = sum(Count))
#----->ANS
stateDams
library(tidyverse)
library(sf)
library(tmap)
library(stringr)
#Reading in Spatial data (and validating)
counties <- sf::read_sf("./Data/County_Boundaries.shp") %>% sf::st_make_valid()
dams <- sf::read_sf("./Data/Dam_or_Other_Blockage_Removed_2012_2017.shp") %>% sf::st_make_valid()
streams <- sf::read_sf("./Data/Streams_Opened_by_Dam_Removal_2012_2017.shp") %>% sf::st_make_valid()
#Reading in aspatial data
bmps <- read_csv("./Data/BMPreport2016_landbmps.csv")
##Glimpsing/quick viewing data and ensuring validity after making valid
glimpse(bmps) #does not need validation as it has no geometry to validate
glimpse(counties)
counties %>% sf::st_is_valid()
glimpse(dams)
dams %>% sf::st_is_valid()
glimpse(streams)
streams %>% sf::st_is_valid()
##quick summary check of wanted and missing data
summary(bmps$Cost) #NA's show up for cost
summary(bmps$TotalAmountCredited) #shows no missing values
summary(bmps$StateAbbreviation) #no missing values #!!!- returns type, not number summary
summary(dams$YEAR) #some missing data, more 0's than years (median is 0.0)
summary(dams$STATE) #duplicated values that can be grouped.
summary(streams$LengthKM)
tm_shape(streams) + tm_lines()
sf::st_crs(counties)
sf::st_crs(streams)
sf::st_crs(dams)
#grouping the table by states and then calculating total cost in one line.
stateCost_bmp_NA <- bmps %>% dplyr::select(StateAbbreviation, Cost) #selecting the data i want
#----->ANS
tapply(stateCost_bmp_NA$Cost, stateCost_bmp_NA$StateAbbreviation, summary) #making a stat summary using tapply()
stateCost_bmp <- na.omit(stateCost_bmp_NA) #Removes NA values
tapply(stateCost_bmp$Cost, stateCost_bmp$StateAbbreviation, summary) #summary statistics for each state cost using tapply()
onlyAcres <- subset(bmps, Unit == "Acres", na.rm = T) #selecting and assigning on the rows with "Acres" used as units
onlyAcres #showing variable in console to quick check units
#bmps #!!! remove initial hast-tag of this line to compare with original bmps table
onlyAcres <- na.omit(onlyAcres) #removed NA values
summary(onlyAcres$Cost) #quick summary
#----->ANS
onlyAcres %>%
dplyr::filter(., Cost > 0 & Cost < 5000000) %>% #limiting the graph, omitting most extreme results
#the limitations were made visually, using dplyr::filter
dplyr::filter(., TotalAmountCredited > 0 & TotalAmountCredited < 30000)%>% #limiting the graph, omitting most extreme results
ggplot(., aes(x = Cost, y = TotalAmountCredited)) +
#geom_smooth()+ #!!!regression line, if required
geom_point(size = 0.8)
#creating workable variable to preseve original data
onlyCovCrop <- bmps %>% mutate(., BMPbasicNM = stringr::str_sub(BMPShortName, 1, 9))%>%
subset(., BMPbasicNM == "covercrop") #create new variable with only cover crop information
onlyCovCrop %>%
ggplot(., aes(x = StateAbbreviation, y = TotalAmountCredited)) +
geom_boxplot(aes(fill = StateAbbreviation))
#----->ANS
onlyCovCrop %>%
dplyr::filter(., TotalAmountCredited > 0 & TotalAmountCredited < 6000) %>%
ggplot(., aes(x = StateAbbreviation, y = TotalAmountCredited)) +
geom_boxplot(aes(fill = StateAbbreviation))
#removing year 0 values
damBuilt <- dams %>% subset(., YEAR != 0) #subset the dam data, selecting all that are not 0.
#!!! this also removed all the NA values for the "YEAR" column
damBuilt #shows all observations due to few quantity
#----->ANS
damBuilt %>%  ggplot(., aes(x = YEAR, y = STATE)) +
geom_point(size = 5, shape = 10)
##TASK1.5 : ---> Aspatial visualisation of linked datasets - student choice
tibbleDams <- damBuilt%>%
as_tibble()%>%dplyr::select(-geometry) #make the table a tibble and remove geometry to reduce errors
dams12_17 <- tibbleDams%>%
subset(., DamRemoval = 2012:2016)%>% mutate(ActiveYrs = DamRemoval - YEAR) #Subset to 2012-2016 while calculating number of years "active"
joined_DamStream <- left_join(dams12_17, streams, by = c("COMID" = "ComID"))
"LengthKM" %in% colnames(joined_DamStream) #check to ensure wanted column is present, couldn't find it in opened table
joined_DamStream <- joined_DamStream %>% mutate(DA_Sqkm = DA_SqMi.x * 2.58999) #calculating the square KM of the dams
joined_DamStream <- joined_DamStream %>% mutate(LengthM = LengthKM * 1000) #calculating the length in meters
"DA_Sqkm" %in% colnames(joined_DamStream) #checking to see if columns have been added
"LengthM" %in% colnames(joined_DamStream)
#----->ANS
joined_DamStream %>%  ggplot(., aes(x = DA_Sqkm, y = LengthM, size = ActiveYrs)) + #tried colour but could not figure out how to separate by individual point
geom_point(alpha = 1, shape = 19) +
theme_gray(base_size = 15)+
labs(x = "Dam Area (Km2)", y = "Length of Resulting Stream (m)", subtitle = "Area vs created stream length of Removed dams")
top5StrmTst <- streams %>% arrange(desc(LengthKM)) %>% #arrange the column of length to largest on top
dplyr::select(ComID, FCode, GNIS_Name, LengthKM) %>% #bring up only the columns that are wanted
head(., 5) #output shows the top 5 lengths of streams and their associated names and ID codes
top5StrmTst #shows created table
top5StrmTst %>% sf::st_length(.,) #will show lengths in meters computed spatially using geometry
#----->ANS
top5Strm <- streams %>% arrange(desc(sf::st_length(.,))) %>% #spatially find lengths and arrange by descending
dplyr::select(ComID, FCode, GNIS_Name, LengthKM) %>% #bring up only the columns that are wanted
head(., 5) #only top 5 brought up
top5Strm #!!!this will show TRUE top 5
top5Strm %>% sf::st_length(.,)
#creating variable to hold grouped and calculated values.
TotStrmCounty <- streams %>% mutate(., GEOlength = sf::st_length(.,)) %>% #creates a column for the spatial length
group_by(FCode) %>%  #grouping by "FCode" under assumption this is FIPS code (could not locate names)
summarise(TOTlnthStrm = sum(GEOlength)) %>% #creating total lengths using groups made
arrange(desc(TOTlnthStrm)) #sorting based on total stream length
#----->ANS
TotStrmCounty %>% dplyr::select(FCode, TOTlnthStrm)%>% #selecting what to show
head(., 3) #showing only top three
FIPtemp <- bmps
FIPtemp <- FIPtemp %>% mutate(., FIPSCode = stringr::str_sub(GeographyName, 1, 5)) #shorten FIPS code
FIPtemp <- FIPtemp %>% mutate(., FIP = as.numeric(as.character(FIPtemp$FIPSCode))) #turns values in to numbers then adds them back to the list
summary(FIPtemp$FIP) #verify it is numeric and give quick summary (should not have 0s)
groupBmpTemp <- FIPtemp%>% group_by(StateAbbreviation, FIP) %>% summarise(totalCost = sum(Cost, na.rm=T))
GEOID10temp <- counties
GEOID10temp <- GEOID10temp %>% mutate(., GEOID10_NUM = as.numeric(as.character(GEOID10temp$GEOID10))) #turns values in to numbers then adds them back to the list
summary(GEOID10temp$GEOID10_NUM) #verify it is numeric and give quick summary (should not have 0s)
joinCountBMP <- left_join(GEOID10temp, groupBmpTemp, by = c("GEOID10_NUM" = "FIP")) #joining the datasets
#----->ANS
tm_shape(joinCountBMP) + tm_polygons(col = "totalCost")
##TASK2.4 : ---> Closest stream segment
#im not sure if this is correct but this is the best i could find for this question
#the assumption is the spatial join will only call in the row that shares a geometry with the dam.
damStrmClos <- dams %>% st_join(., streams) #joining files to spatially find closest streams
#----->ANS
damStrmClos %>% dplyr::select(DAM_NAME.x, WATERBODY.x, GNIS_Name) #show the names of the dam and the corresponding stream
stateDams <- dams %>% mutate(., Count = 1)  %>% #add a column to simiulate count
group_by(., STATE) %>% summarise(NumberDams = sum(Count)) #group by state and sum the count
#----->ANS
stateDams #brings up the data
